<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String" xml:space="preserve">
    <value>AutomaticEntryInstructions1</value>
    <comment>Data will be submitted automatically.</comment>
  </data>
  <data name="String1" xml:space="preserve">
    <value>AutomaticEntryInstructions1Not</value>
    <comment>Data will not be submitted automatically.</comment>
  </data>
  <data name="String10" xml:space="preserve">
    <value>CommandPrompt</value>
    <comment>Scan barcode&gt;</comment>
  </data>
  <data name="String11" xml:space="preserve">
    <value>ConsoleTitle</value>
    <comment>EMVS Unique Identifier Tester</comment>
  </data>
  <data name="String12" xml:space="preserve">
    <value>DidNotIncludePpn</value>
    <comment>did not include</comment>
  </data>
  <data name="String13" xml:space="preserve">
    <value>DisplayAdvice_1</value>
    <comment>ADVICE</comment>
  </data>
  <data name="String14" xml:space="preserve">
    <value>DisplayCalibrationFailedMessage_1</value>
    <comment>The current combination of barcode and Operating System keyboard layouts cannot be calibrated.</comment>
  </data>
  <data name="String15" xml:space="preserve">
    <value>DisplayCalibrationFailedMessage_2</value>
    <comment>Check that you have scanned the correct barcode for calibration. If you have, reconfigure the</comment>
  </data>
  <data name="String16" xml:space="preserve">
    <value>DisplayCalibrationFailedMessage_3</value>
    <comment>scanner to emulate a different keyboard layout or a numeric keypad.</comment>
  </data>
  <data name="String17" xml:space="preserve">
    <value>DisplayCalibrationInformation_1</value>
    <comment>Press any key to continue...</comment>
  </data>
  <data name="String18" xml:space="preserve">
    <value>DisplayCalibrationOptions_1</value>
    <comment>* Scan the barcode to calibrate the tester application.</comment>
  </data>
  <data name="String19" xml:space="preserve">
    <value>DisplayCalibrationOptions_2</value>
    <comment>* Press Ctrl-O to exit the calibration mode.</comment>
  </data>
  <data name="String2" xml:space="preserve">
    <value>AutomaticEntryInstructions2</value>
    <comment> Press RETURN to submit data. Configure the scanner to transmit carriage returns.</comment>
  </data>
  <data name="String20" xml:space="preserve">
    <value>DisplayCalibrationReport_1</value>
    <comment>CALIBRATION REPORT</comment>
  </data>
  <data name="String21" xml:space="preserve">
    <value>DisplayCalibrationSaveError_1</value>
    <comment>Press any key to continue...</comment>
  </data>
  <data name="String22" xml:space="preserve">
    <value>DisplayKeepScanning_1</value>
    <comment>Keep scanning...</comment>
  </data>
  <data name="String23" xml:space="preserve">
    <value>DisplayMainOptions_1</value>
    <comment> * Scan a barcode.</comment>
  </data>
  <data name="String24" xml:space="preserve">
    <value>DisplayMainOptions_2</value>
    <comment> * Type in or paste data and press Enter.</comment>
  </data>
  <data name="String25" xml:space="preserve">
    <value>DisplayMainOptions_3</value>
    <comment> * Press Ctrl-R to toggle between automatic and manual (carriage return) submission of data.</comment>
  </data>
  <data name="String26" xml:space="preserve">
    <value>DisplayMainOptions_4</value>
    <comment> * Press Ctrl-K to calibrate the tester for the current scanner and keyboard layout.</comment>
  </data>
  <data name="String27" xml:space="preserve">
    <value>DisplayMainOptions_5</value>
    <comment> * Press Shift Ctrl-K to calibrate the tester for the current scanner and keyboard layout for GS1 FNC barcodes, only.</comment>
  </data>
  <data name="String28" xml:space="preserve">
    <value>DisplayMainOptions_6</value>
    <comment> * Press Ctrl-S to clear the screen.</comment>
  </data>
  <data name="String29" xml:space="preserve">
    <value>DisplayMainOptions_7</value>
    <comment> * Press Ctrl-T to exit the program.</comment>
  </data>
  <data name="String3" xml:space="preserve">
    <value>BarcodesStillToScan</value>
    <comment>barcodes still to scan...</comment>
  </data>
  <data name="String30" xml:space="preserve">
    <value>DisplayMainOptions_8</value>
    <comment> * Press Up and Down Arrows to select and retry cached entries.</comment>
  </data>
  <data name="String31" xml:space="preserve">
    <value>DisplayParserResults_1</value>
    <comment>Input contains one or more characters that cannot be encoded.</comment>
  </data>
  <data name="String32" xml:space="preserve">
    <value>DisplayParserResults_2</value>
    <comment>PARSER ERROR:</comment>
  </data>
  <data name="String33" xml:space="preserve">
    <value>DisplayParserResults_3</value>
    <comment>ERROR:</comment>
  </data>
  <data name="String34" xml:space="preserve">
    <value>DoNotSubmitToNationalSystem</value>
    <comment>do not submit to national system</comment>
  </data>
  <data name="String35" xml:space="preserve">
    <value>Error</value>
    <comment>Error</comment>
  </data>
  <data name="String36" xml:space="preserve">
    <value>IncludePpn</value>
    <comment>included</comment>
  </data>
  <data name="String37" xml:space="preserve">
    <value>Information</value>
    <comment>Information</comment>
  </data>
  <data name="String38" xml:space="preserve">
    <value>InformationForPpn</value>
    <comment>{0}: Calibration {1} tests for Format 05 and Format 06 (German PPN) barcodes.</comment>
  </data>
  <data name="String39" xml:space="preserve">
    <value>Initialise_1</value>
    <comment>Press any key to continue...</comment>
  </data>
  <data name="String4" xml:space="preserve">
    <value>BarcodeStillToScan</value>
    <comment>barcode still to scan...</comment>
  </data>
  <data name="String40" xml:space="preserve">
    <value>Invalid</value>
    <comment>invalid</comment>
  </data>
  <data name="String41" xml:space="preserve">
    <value>InvalidCharacterPlaceHolderMessage</value>
    <comment> □ represents an invalid character </comment>
  </data>
  <data name="String42" xml:space="preserve">
    <value>IssuingAgencyCountry</value>
    <comment>Company or national identifier assigned by issuing agency in {0}.</comment>
  </data>
  <data name="String43" xml:space="preserve">
    <value>ListIntPtrCastError</value>
    <comment>GCHandle Target could not be cast as List&lt;IntPtr&gt;</comment>
  </data>
  <data name="String44" xml:space="preserve">
    <value>MenuAutoSubmit</value>
    <comment>Auto-submit</comment>
  </data>
  <data name="String45" xml:space="preserve">
    <value>MenuCalibrateFull</value>
    <comment>Calibrate (full)</comment>
  </data>
  <data name="String46" xml:space="preserve">
    <value>MenuCalibrateGS1</value>
    <comment>Calibrate (GS1)</comment>
  </data>
  <data name="String47" xml:space="preserve">
    <value>MenuClearScreen</value>
    <comment>Clear Screen</comment>
  </data>
  <data name="String48" xml:space="preserve">
    <value>MenuExit</value>
    <comment>Exit</comment>
  </data>
  <data name="String49" xml:space="preserve">
    <value>Nothing</value>
    <comment>nothing</comment>
  </data>
  <data name="String5" xml:space="preserve">
    <value>CalibrationViewDoNotCallRender</value>
    <comment>CalibrationView - do not call Render</comment>
  </data>
  <data name="String50" xml:space="preserve">
    <value>Options</value>
    <comment>OPTIONS</comment>
  </data>
  <data name="String51" xml:space="preserve">
    <value>SaveError</value>
    <comment>The calibration was not saved{0}</comment>
  </data>
  <data name="String52" xml:space="preserve">
    <value>SubmitToNationalSystem</value>
    <comment>submit to national system</comment>
  </data>
  <data name="String53" xml:space="preserve">
    <value>Unknown</value>
    <comment>unknown</comment>
  </data>
  <data name="String54" xml:space="preserve">
    <value>Valid</value>
    <comment>valid</comment>
  </data>
  <data name="String55" xml:space="preserve">
    <value>VtSequencesNotSupported</value>
    <comment>The application requires VT sequences which are not supported on this platform.</comment>
  </data>
  <data name="String56" xml:space="preserve">
    <value>Warning</value>
    <comment>Warning</comment>
  </data>
  <data name="String6" xml:space="preserve">
    <value>ClearConsoleBuffer</value>
    <comment>--- Clear console buffer ----</comment>
  </data>
  <data name="String7" xml:space="preserve">
    <value>CodePageInitialiseError</value>
    <comment>Could not initialise code page {0}</comment>
  </data>
  <data name="String8" xml:space="preserve">
    <value>CodePageInitialiseErrorRecovery</value>
    <comment>Press any key to continue, using default code page...</comment>
  </data>
  <data name="String9" xml:space="preserve">
    <value>CodePageInitialiseFakeCommandLine</value>
    <comment>CodePage = {0}</comment>
  </data>
</root>